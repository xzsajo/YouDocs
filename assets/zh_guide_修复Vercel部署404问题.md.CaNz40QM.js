import{_ as a,c as i,o as n,aj as e}from"./chunks/framework.BSmczVVR.js";const o=JSON.parse('{"title":"修复Vercel部署404问题","description":"","frontmatter":{},"headers":[],"relativePath":"zh/guide/修复Vercel部署404问题.md","filePath":"zh/guide/修复Vercel部署404问题.md","lastUpdated":1759853980000}'),l={name:"zh/guide/修复Vercel部署404问题.md"};function p(t,s,h,r,k,d){return n(),i("div",null,[...s[0]||(s[0]=[e(`<h1 id="修复vercel部署404问题" tabindex="-1">修复Vercel部署404问题 <a class="header-anchor" href="#修复vercel部署404问题" aria-label="Permalink to “修复Vercel部署404问题”">​</a></h1><p>✅ 直接访问文章链接：<a href="https://yoursite.vercel.app/blog/my-article" target="_blank" rel="noreferrer">https://yoursite.vercel.app/blog/my-article</a><br> ✅ 刷新页面不会出现 404</p><h2 id="问题原因" tabindex="-1">问题原因 <a class="header-anchor" href="#问题原因" aria-label="Permalink to “问题原因”">​</a></h2><p>Vercel 默认情况下，当你直接访问一个具体的路由（如 /blog/my-article）时，会尝试在服务器上查找对应的静态文件。如果找不到，就会返回 404。</p><h2 id="解决方案" tabindex="-1">解决方案 <a class="header-anchor" href="#解决方案" aria-label="Permalink to “解决方案”">​</a></h2><p>在项目根目录创建 vercel.json 文件：</p><div class="language-json"><button title="复制代码" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;rewrites&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;source&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/(.*)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;destination&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;/index.html&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;trailingSlash&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;cleanUrls&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>修改<code>.github/workflows/deploy.yml</code>文件，在执行<code>Commit and Push</code>前添加以下步骤：</p><div class="language-yaml"><button title="复制代码" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Copy vercel.json</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">cp vercel.json docs/.vitepress/dist/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">- </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Commit and Push</span></span></code></pre></div><p>这个配置会让所有路由都指向 <code>index.html</code>，然后由 VitePress 的前端路由来处理，这样就解决了<code>刷新页面</code>和<code>直接访问文章链接</code>遇到 404 的问题。</p><h2 id="放在哪里" tabindex="-1">放在哪里 <a class="header-anchor" href="#放在哪里" aria-label="Permalink to “放在哪里”">​</a></h2><div class="language-pgsql"><button title="复制代码" class="copy"></button><span class="lang">pgsql</span><pre class="shiki shiki-themes github-light github-dark" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0" dir="ltr"><code><span class="line"><span>my-vitepress-project/</span></span>
<span class="line"><span>├── docs/</span></span>
<span class="line"><span>│   ├── .vitepress/</span></span>
<span class="line"><span>│   │   ├── config.ts</span></span>
<span class="line"><span>│   │   └── dist/           ← 这里是构建产物</span></span>
<span class="line"><span>│   ├── guide/</span></span>
<span class="line"><span>│   └── index.md</span></span>
<span class="line"><span>├── vercel.json             ✅ 放在这里</span></span>
<span class="line"><span>├── package.json</span></span>
<span class="line"><span>├── pnpm-lock.yaml</span></span>
<span class="line"><span>└── .github/</span></span>
<span class="line"><span>    └── workflows/</span></span>
<span class="line"><span>        └── deploy.yml      ← 你的 GitHub Action 文件</span></span></code></pre></div>`,12)])])}const g=a(l,[["render",p]]);export{o as __pageData,g as default};
